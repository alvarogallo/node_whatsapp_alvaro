// index.js - Servidor completo con optimizaciones de memoria
// Cargar variables de entorno al inicio
require('dotenv').config();

const express = require('express');
const session = require('express-session');
const fs = require('fs');
const path = require('path');

const app = express();

// ===== CONFIGURACI√ìN B√ÅSICA =====
app.set('view engine', 'ejs');
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// Servir archivos est√°ticos desde la carpeta 'public'
app.use('/public', express.static(path.join(__dirname, 'public')));

// ===== HABILITAR CORS =====
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    
    // Responder a preflight requests
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// Configuraci√≥n de sesiones con variable de entorno
app.use(session({
  secret: process.env.SESSION_SECRET || 'clave_secreta_fallback',
  resave: false,
  saveUninitialized: true
}));

// Crear directorios necesarios si no existen
if (!fs.existsSync('./sessions')) {
    fs.mkdirSync('./sessions', { recursive: true });
}

if (!fs.existsSync('./public')) {
    fs.mkdirSync('./public', { recursive: true });
}

if (!fs.existsSync('./utils')) {
    fs.mkdirSync('./utils', { recursive: true });
}

// ===== IMPORTAR RUTAS =====
const authRoutes = require('./routes/auth');
const dashboardRoutes = require('./routes/dashboard');
const apiRoutes = require('./routes/api');

// ===== USAR RUTAS =====
app.use('/', authRoutes);           // /, /login, /logout
app.use('/dashboard', dashboardRoutes);  // /dashboard/*
app.use('/api', apiRoutes);         // /api/*

// ===== RECUPERACI√ìN AUTOM√ÅTICA DE SESIONES =====
async function startupRecovery() {
    try {
        console.log('\nüîÑ INICIANDO RECUPERACI√ìN INTELIGENTE DE SESIONES...');
        const { recoverAllSessions, getSessionsStats } = require('./services/sessionRecovery');
        
        // Mostrar estad√≠sticas antes de recuperar
        const statsBefore = getSessionsStats();
        console.log(`üìä Estad√≠sticas iniciales:`);
        console.log(`   üìÅ Total en carpeta: ${statsBefore.total}`);
        console.log(`   ‚úÖ V√°lidas: ${statsBefore.valid}`);
        console.log(`   ‚ùå Inv√°lidas: ${statsBefore.invalid}`);
        console.log(`   üü¢ Ya activas: ${statsBefore.active}`);
        console.log(`   üîÑ Necesitan recuperaci√≥n: ${statsBefore.needRecovery}`);
        
        // ‚úÖ CLAVE: Solo proceder si hay sesiones que realmente necesitan recuperaci√≥n
        if (statsBefore.needRecovery > 0) {
            console.log(`\nüöÄ Recuperando ${statsBefore.needRecovery} sesi√≥n(es) que lo necesitan...`);
            
            const startTime = Date.now();
            const results = await recoverAllSessions();
            const endTime = Date.now();
            
            console.log(`\nüìã RESULTADOS DE RECUPERACI√ìN:`);
            console.log(`   ‚è±Ô∏è  Tiempo total: ${((endTime - startTime) / 1000).toFixed(1)}s`);
            console.log(`   ‚úÖ Recuperadas: ${results.recovered}`);
            console.log(`   ‚è≠Ô∏è  Saltadas (ya activas): ${results.skipped}`);
            console.log(`   ‚ùå Fallidas: ${results.failed}`);
            
            if (results.sessions.length > 0) {
                console.log(`\nüìÑ DETALLE DE SESIONES:`);
                results.sessions.forEach(session => {
                    switch (session.status) {
                        case 'recovered':
                            console.log(`   ‚úÖ ${session.sessionId} - Recuperada - Estado: ${session.session.status}`);
                            break;
                        case 'skipped':
                            console.log(`   ‚è≠Ô∏è  ${session.sessionId} - Saltada (ya activa)`);
                            break;
                        case 'failed':
                            console.log(`   ‚ùå ${session.sessionId} - Error: ${session.reason}`);
                            break;
                    }
                });
            }
            
        } else if (statsBefore.active > 0) {
            console.log(`‚úÖ Todas las ${statsBefore.active} sesi√≥n(es) v√°lida(s) ya est√°n activas - No se requiere recuperaci√≥n`);
        } else {
            console.log('üìù No hay sesiones para recuperar');
        }
        
        // Mostrar estad√≠sticas finales
        const statsAfter = getSessionsStats();
        console.log(`\nüìä Estado final:`);
        console.log(`   üü¢ Sesiones activas: ${statsAfter.active}`);
        console.log(`   üìÅ Total en disco: ${statsAfter.total}`);
        
        console.log('‚úÖ Proceso de recuperaci√≥n completado de forma segura\n');
        
    } catch (error) {
        console.error('‚ùå Error durante recuperaci√≥n de sesiones:', error);
    }
}

// ===== OPTIMIZACI√ìN DE MEMORIA =====
async function setupMemoryOptimization() {
    try {
        console.log('\nüß† CONFIGURANDO OPTIMIZACI√ìN DE MEMORIA...');
        const memoryOptimizer = require('./services/memoryOptimization');
        
        // Mostrar configuraci√≥n inicial
        const initialMemory = memoryOptimizer.getMemoryUsage();
        console.log(`üíæ Memoria inicial: ${initialMemory.rss}MB RAM, ${initialMemory.heapUsed}MB Heap`);
        
        // Mostrar l√≠mites configurados
        console.log(`‚öôÔ∏è  L√≠mites configurados:`);
        console.log(`   üì± M√°x sesiones: ${memoryOptimizer.MEMORY_LIMITS.MAX_TOTAL_SESSIONS}`);
        console.log(`   üí¨ M√°x mensajes/sesi√≥n: ${memoryOptimizer.MEMORY_LIMITS.MAX_MESSAGES_PER_SESSION}`);
        console.log(`   ‚ö†Ô∏è  Advertencia memoria: ${memoryOptimizer.MEMORY_LIMITS.MEMORY_WARNING_MB}MB`);
        console.log(`   üö® Cr√≠tico memoria: ${memoryOptimizer.MEMORY_LIMITS.MEMORY_CRITICAL_MB}MB`);
        console.log(`   ‚è∞ Timeout sesi√≥n: ${memoryOptimizer.MEMORY_LIMITS.SESSION_TIMEOUT_HOURS}h`);
        
        // Iniciar limpieza autom√°tica
        memoryOptimizer.startAutomaticCleanup();
        
        // Verificaci√≥n inicial
        const initialCheck = await memoryOptimizer.checkMemoryLimits();
        console.log(`üìä Estado inicial: ${initialCheck.status}`);
        
        console.log('‚úÖ Optimizaci√≥n de memoria configurada\n');
        
    } catch (error) {
        console.error('‚ùå Error configurando optimizaci√≥n de memoria:', error);
    }
}

// ===== SERVIDOR =====
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', async () => {
    const memoryUsage = process.memoryUsage();
    const formatBytes = (bytes) => (bytes / 1024 / 1024).toFixed(2);
    
    console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`);
    console.log(`üåç Accesible desde cualquier IP en puerto ${PORT}`);
    console.log('\n=== CONFIGURACI√ìN ===');
    console.log(`üìß Admin Email: ${process.env.ADMIN_EMAIL || 'alvarogallo@hotmail.com'}`);
    console.log(`üîê Variables de entorno cargadas: ${process.env.NODE_ENV || 'development'}`);
    console.log('\n=== MEMORIA INICIAL ===');
    console.log(`üíæ RAM Total: ${formatBytes(memoryUsage.rss)} MB`);
    console.log(`üß† Heap Usado: ${formatBytes(memoryUsage.heapUsed)} MB`);
    console.log(`üìä Heap Total: ${formatBytes(memoryUsage.heapTotal)} MB`);
    
    // ‚≠ê NUEVA SECCI√ìN: Configurar optimizaci√≥n de memoria
    await setupMemoryOptimization();
    
    // ‚≠ê SECCI√ìN EXISTENTE: Recuperaci√≥n de sesiones
    await startupRecovery();
    
    console.log('\n=== RUTAS DISPONIBLES ===');
    console.log('üîê AUTENTICACI√ìN:');
    console.log('   GET  /                    - P√°gina principal');
    console.log('   POST /login              - Procesar login');
    console.log('   GET  /logout             - Cerrar sesi√≥n');
    console.log('');
    console.log('üõ°Ô∏è  PROTEGIDAS (requieren login):');
    console.log('   GET  /dashboard          - Panel de control');
    console.log('   POST /dashboard/create-session');
    console.log('   GET  /dashboard/session/:id');
    console.log('   POST /dashboard/session/:id/send');
    console.log('   DELETE /dashboard/session/:id');
    console.log('');
    console.log('üåç P√öBLICAS (API sin login):');
    console.log('   GET  /api/cliente           - Cliente WhatsApp HTML');
    console.log('   GET  /api/lottery-info      - Informaci√≥n clave del d√≠a');
    console.log('   POST /api/lottery-refresh   - Refrescar cach√© loter√≠a');
    console.log('   POST /api/session           - Crear sesi√≥n (requiere clave_hoy)');
    console.log('   POST /api/session/:sessionId - Crear sesi√≥n con ID espec√≠fico');
    console.log('   GET  /api/qr/:sessionId     - Obtener token QR');
    console.log('   GET  /api/status/:sessionId - Estado de sesi√≥n');
    console.log('   DELETE /api/session/:sessionId - Borrar sesi√≥n');
    console.log('   GET  /api/system-info       - Info del sistema');
    console.log('   GET  /api/sessions-stats    - Estad√≠sticas de sesiones');
    console.log('   POST /api/recover-sessions  - Recuperar sesiones manualmente');
    console.log('   POST /api/recover-session/:sessionId - Recuperar sesi√≥n espec√≠fica');
    console.log('   POST /api/clean-invalid-sessions - Limpiar sesiones inv√°lidas');
    console.log('   POST /api/clean-orphaned-folders - Limpiar carpetas hu√©rfanas');
    console.log('');
    console.log('üì± GRUPOS Y MENSAJES:');
    console.log('   POST /api/session/:sessionId/groups - Obtener grupos');
    console.log('   POST /api/groups            - Obtener grupos (sessionId en body)');
    console.log('   POST /api/session/:sessionId/send-group-message - Enviar a grupo');
    console.log('   POST /api/send-group-message - Enviar a grupo (sessionId en body)');
    console.log('');
    console.log('üß† OPTIMIZACI√ìN DE MEMORIA:');
    console.log('   GET  /api/memory-stats      - Estad√≠sticas de memoria');
    console.log('   POST /api/memory-cleanup    - Forzar limpieza de memoria');
    console.log('   POST /api/close-inactive-sessions - Cerrar sesiones inactivas');
    console.log('   POST /api/memory-limits     - Configurar l√≠mites de memoria');
    console.log('');
    console.log('‚ÑπÔ∏è  AYUDA:');
    console.log('   GET  /api/client-help       - Gu√≠a para manejo de clientes');
    console.log('');
    console.log('üì± Ejemplos:');
    console.log('   http://localhost:3000/api/cliente');
    console.log('   http://localhost:3000/api/lottery-info');
    console.log('   http://localhost:3000/api/memory-stats');
    console.log('   http://localhost:3000/api/client-help');
    
    // Mostrar informaci√≥n de memoria cada 5 minutos
    setInterval(() => {
        try {
            const memoryOptimizer = require('./services/memoryOptimization');
            const currentMemory = memoryOptimizer.getMemoryUsage();
            const sessionCount = require('./services/whatsapp').activeSessions.size;
            
            console.log(`\nüíæ [${new Date().toLocaleString()}] RAM: ${currentMemory.rss}MB | Heap: ${currentMemory.heapUsed}MB | Sesiones: ${sessionCount}`);
            
            // Alerta si la memoria est√° alta
            if (currentMemory.rss >= memoryOptimizer.MEMORY_LIMITS.MEMORY_WARNING_MB) {
                console.warn(`‚ö†Ô∏è  ADVERTENCIA: Memoria alta (${currentMemory.rss}MB >= ${memoryOptimizer.MEMORY_LIMITS.MEMORY_WARNING_MB}MB)`);
            }
            
        } catch (error) {
            console.error('‚ùå Error en monitoreo de memoria:', error);
        }
    }, 5 * 60 * 1000);
    
    // Configurar cierre correcto
    const { setupGracefulShutdown } = require('./utils/gracefulShutdown');
    setupGracefulShutdown();
    
    console.log('\nüí° CONTROLES:');
    console.log('   Presiona Ctrl+C para cerrar el servidor correctamente');
    console.log('   El sistema cerrar√° todas las sesiones de WhatsApp autom√°ticamente');
    console.log('   ‚ö†Ô∏è  Si no responde, presiona Ctrl+C nuevamente para forzar cierre');
    console.log('\nüéØ SERVIDOR LISTO Y OPTIMIZADO!\n');
});